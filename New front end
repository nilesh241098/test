from unittest.mock import patch, MagicMock
import pytest
import streamlit as st
import json


# Test Case 1: Cloud Provider Selection
def test_cloud_provider_selection():
    """
    Test case for cloud provider selection.
    """
    # Mock the selectbox
    with patch("streamlit.selectbox") as mock_selectbox:
        # Simulate the user selecting "AWS"
        mock_selectbox.return_value = "AWS"

        # Assert that the cloud provider selection works
        selected_provider = st.selectbox("Select Cloud Provider", ["AWS", "Azure", "GCP"])
        assert selected_provider == "AWS"


# Test Case 2: Role Data as Typed JSON
@patch("requests.post")
def test_json_input(mock_post):
    """
    Test case for role data entered as JSON in the text area.
    """
    # Mock the POST request
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = {
        "response": "Test response for JSON input.",
        "hyperparameters": {"length": 42}
    }

    # Mock the text area
    with patch("streamlit.text_area") as mock_text_area:
        mock_text_area.return_value = json.dumps({
            "role": "Security Engineer",
            "responsibilities": "Ensure infrastructure security"
from unittest.mock import patch, MagicMock
import pytest
import streamlit as st
import json


# Test Case 1: Cloud Provider Selection
def test_cloud_provider_selection():
    """
    Test case for cloud provider selection.
    """
    # Mock the selectbox
    with patch("streamlit.selectbox") as mock_selectbox:
        # Simulate the user selecting "AWS"
        mock_selectbox.return_value = "AWS"

        # Assert that the cloud provider selection works
        selected_provider = st.selectbox("Select Cloud Provider", ["AWS", "Azure", "GCP"])
        assert selected_provider == "AWS"


# Test Case 2: Role Data as Typed JSON
@patch("requests.post")
def test_json_input(mock_post):
    """
    Test case for role data entered as JSON in the text area.
    """
    # Mock the POST request
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = {
        "response": "Test response for JSON input.",
        "hyperparameters": {"length": 42}
    }

    # Mock the text area
    with patch("streamlit.text_area") as mock_text_area:
        mock_text_area.return_value = json.dumps({
            "role": "Security Engineer",
            "responsibilities": "Ensure infrastructure security"
        })

        # Simulate JSON input
        json_input = st.text_area("Enter JSON data:")
        assert json_input is not None

        # Simulate making the API call
        response = mock_post("http://127.0.0.1:8000/enumerator", json={"prompt": "The role of Security Engineer in AWS involves ensuring infrastructure security."})
        assert response.status_code == 200
        assert response.json()["response"] == "Test response for JSON input."


# Test Case 3: Role Data via File Upload
@patch("requests.post")
@patch("streamlit.file_uploader")
def test_json_file_upload(mock_file_uploader, mock_post):
    """
    Test case for role data uploaded via a JSON file.
    """
    # Mock the POST request
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = {
        "response": "Test response for file upload.",
        "hyperparameters": {"length": 42}
    }

    # Mock file uploader
    mock_file_uploader.return_value = MagicMock()
    mock_file_uploader.return_value.read.return_value = b'{"role": "Developer", "responsibilities": "Build and deploy applications"}'

    # Simulate file upload
    uploaded_file = st.file_uploader("Upload JSON file", type=["json"])
    assert uploaded_file is not None

    # Simulate reading file content
    file_content = uploaded_file.read().decode("utf-8")
    role_data = json.loads(file_content)
    assert role_data["role"] == "Developer"

    # Simulate making the API call
    response = mock_post("http://127.0.0.1:8000/enumerator", json={"prompt": "The role of Developer in AWS involves building and deploying applications."})
    assert response.status_code == 200
    assert response.json()["response"] == "Test response for file upload."


# Test Case 4: Invalid JSON Input
def test_invalid_json_input():
    """
    Test case for invalid JSON input.
    """
    # Mock the text area
    with patch("streamlit.text_area") as mock_text_area:
        mock_text_area.return_value = "INVALID_JSON"

        # Simulate invalid JSON input
        json_input = st.text_area("Enter JSON data:")
        assert json_input is not None

        # Try parsing invalid JSON and expect an error
        with pytest.raises(json.JSONDecodeError):
            json.loads(json_input)


# Test Case 5: Missing Cloud Provider
def test_missing_cloud_provider():
    """
    Test case for missing cloud provider selection.
    """
    # Mock the selectbox
    with patch("streamlit.selectbox") as mock_selectbox:
        # Simulate no selection (empty string)
        mock_selectbox.return_value = ""

        # Simulate cloud provider selection
        selected_provider = st.selectbox("Select Cloud Provider", ["AWS", "Azure", "GCP"])
        assert selected_provider == ""

        # Ensure that no cloud provider is selected
        assert not selected_provider, "Cloud provider should not be selected."ï¿¼Enter        })

        # Simulate JSON input
        json_input = st.text_area("Enter JSON data:")
        assert json_input is not None

        # Simulate making the API call
        response = mock_post("http://127.0.0.1:8000/enumerator", json={"prompt": "The role of Security Engineer in AWS involves ensuring infrastructure security."})
        assert response.status_code == 200
        assert response.json()["response"] == "Test response for JSON input."


# Test Case 3: Role Data via File Upload
@patch("requests.post")
@patch("streamlit.file_uploader")
def test_json_file_upload(mock_file_uploader, mock_post):
    """
    Test case for role data uploaded via a JSON file.
    """
    # Mock the POST request
    mock_post.return_value.status_code = 200
    mock_post.return_value.json.return_value = {
        "response": "Test response for file upload.",
        "hyperparameters": {"length": 42}
    }

Mock file uploader
    mock_file_uploader.return_value = MagicMock()
    mock_file_uploader.return_value.read.return_value = b'{"role": "Developer", "responsibilities": "Build and deploy applications"}'

    # Simulate file upload
    uploaded_file = st.file_uploader("Upload JSON file", type=["json"])
    assert uploaded_file is not None

    # Simulate reading file content
    file_content = uploaded_file.read().decode("utf-8")
    role_data = json.loads(file_content)
    assert role_data["role"] == "Developer"

    # Simulate making the API call
    response = mock_post("http://127.0.0.1:8000/enumerator", json={"prompt": "The role of Developer in AWS involves building and deploying applications."})
    assert response.status_code == 200
    assert response.json()["response"] == "Test response for file upload."


# Test Case 4: Invalid JSON Input
def test_invalid_json_input():
    """
    Test case for invalid JSON input.
    """
    # Mock the text area
    with patch("streamlit.text_area") as mock_text_area:
